//В Java все классы наследуются от Object.
//Это позволяет группировать ссылки на объекты и работать с ними единообразно.
//Класс Object предоставляет следующие методы, которые есть у всех объектов:
//  1) Class<?> getClass() - возвращает ссылку на класс объекта
//  2) int hashCode() - возвращает хэш-код объекта, по умолчанию это
//    рассчитанное специальным образом число на основании генератора
//    случайных чисел;
//  3) boolean equals(Object obj) — возвращает true, если объекты одинаковы,
//    по умолчанию выполняет сравнение по ссылке: ==;
//  4) Object clone() - создает копию объекта;
//  5) String toString() - возвращает строковое представление объекта,
//    например для удобства вывода в консоль;
//  6) void finalize() - выполняется при уничтожении объекта сборщиком
//            мусора;
//  7) методы wait(), notify() и notifyAll() используются при многопоточном
//    программировании.

//    Для определения идентичности объектов используют методы equals() и
//    hashCode(). Они переопределяются оба для соответсвия
//    следующим требованиям.  (сгенерировать Intellij IDEA: ALT + Insert).
//    equals:
//    1. Рефлективность — объект всегда равен самому себе:
//       a.equals(a).
//    2. Симметричность —
//        если a.equals(b) , то и b.equals(a).
//    3. Транзитивность —
//        если a.equals(b), b.equals(c), то и a.equals(c).
//    4. Консистентность — сколько бы раз не вызывался equals без изменения состояния объектов,
//    результат должен оставаться неизменным.
//    Переопределенный equals проверяет сначала идентичность с помощью ==,
//    потом на null и тип переданного объекта,
//    после чего сравнивает при помощи equals все поля
//    hashCode:
//    1. Сколько раз бы не был вызван hashCode на объекте, он должен
//    возвращать то же значение. Значение может быть иным при следующем выполении программы.
//    2. Если объекты равны по equals(), то hashCode() должен вернуть
//    одинаковое значение для обоих объектов.
//    3. Если объекты не равны по equals(), hashCode() может возвращать
//    одинаковые значения

jgjkjhk