Исключение — это такая ситуация, когда дальнейшее выполнение программы либо невозможно, либо нецелесообразно.
это проблема возникающая во время выполнения программы.

Исключение в рамках языка Java — это объект наследник класса Throwable, который выброшен при помощи ключевого слова throw.

Например:
целочисленное деление на ноль
попытка получить 10-й элемент из массива размером в 5 элементов
попытка получить доступ к объекту по null ссылке, и т. д

Все исключения в Java являются объектами. Поэтому они могут порождаться не только автоматически при возникновении исключительной ситуации,
но и создаваться самим разработчиком.

Когда создается исключение, собирается стэк вызова.
Развернутый стэк вызовов называется stack trace, он позволаяет легко найти где в коде возникла проблема.

Error — ошибки JVM, их обработка не имеет смысла;
Exception — корневой класс для всех пользовательских и  библиотечных исключений;
RuntimeException — корневой класс для всех пользовательских исключений, которые не требуют обработки на этапе компиляции.
Обрабатываются на этапе выполнения

------------------------------------------------------------

В Java все исключения делятся на два типа:
1) контролируемые исключения (checked) и
2) неконтролируемые исключения (unchecked), к которым относятся ошибки (Errors) и исключения времени выполнения (RuntimeExceptions, потомок класса Exception).
Контролируемые исключения представляют собой ошибки, которые можно и нужно обрабатывать в программе,
к этому типу относятся все потомки класса Exception (но не RuntimeException).

-------------------------------------------------------------

способы обработки исключений?
- try — данное ключевое слово используется для отметки начала блока кода, который потенциально может привести к ошибке.
- catch — ключевое слово для отметки начала блока кода, предназначенного для перехвата и обработки исключений.
Можно описывать несколько таких блоков, либо, начиная с Java 7 исключения можно группировать более точно через оператор |:
ClassCastException | ArrayIndexOutOfBoundsException e
- finally — дополнительный блок.
Этот блок помещается после последнего блока ‘catch’. Управление обычно* передаётся в блок ‘finally’ в любом случае.
*кроме случаев завершения работы JVM или текущего потока внутри блоков try и catch
- throw — служит для генерации исключений.
- throws — ключевое слово, которое прописывается в сигнатуре метода, и обозначающее что метод потенциально может выбросить исключение с указанным типом.

-------------------------------------------------------------

Обрабатываемые исключения:
Такие исключения вынуждают программиста либо их обработать,
либо пробросить на уровень выше с помощью ключевого слова throws.

throw new Exception("Exception here"); // ошибка компиляции

Вариант 1 — обработать в блоке try-catch:

try {
       throw new Exception("Useless exception");
} catch (Exception e) {
      e.printStackTrace();
}

Вариант 2 — пробросить на уровень выше:
public static void main(String[] args) throws Exception {}

Если вызывается метод, который пробрасывает checked exception, то
необходимо снова провести обработку исключения

------------------------------------------------------------

Чтобы написать свое исключение достаточно унаследовать класс
Throwable или один из его потомков.
Например:
- Exception
- или RuntimeException.
Выбор из этих двух зависит исключительно от
ситуации:
хотите вы, чтобы программист обязательно обрабатывал ваше исключение, тогда Exception,
а если нет, то RuntimeException
© 2018 GitHub, Inc.